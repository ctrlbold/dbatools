<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dbatools</name>
    </assembly>
    <members>
        <member name="T:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand">
            <summary>
            Implements the Select-DbaObject command
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.InputObject">
            <summary>
            The actual input object that is being processed
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.Property">
            <summary>
            The properties to select. Supports fancy DSL
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.ExcludeProperty">
            <summary>
            Properties to skip
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.ExpandProperty">
            <summary>
            A property to expand.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.Unique">
            <summary>
            Whether to exclude duplicates
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.Last">
            <summary>
            The last number of items to pick
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.First">
            <summary>
            Pick the first n items.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.Skip">
            <summary>
            Skip n items before picking items
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.SkipLast">
            <summary>
            Skip the last n items
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.Wait">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.Index">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.ShowProperty">
            <summary>
            THe properties to display by default
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.ShowExcludeProperty">
            <summary>
            The properties to NOT display by default
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.TypeName">
            <summary>
            The typename to assign to the psobject
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.KeepInputObject">
            <summary>
            Keep the original input object, just add to it.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand._NonclonedProperties">
            <summary>
            List of properties to NOT clone into the hashtable used against Select-Object
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand._NoAdjustment">
            <summary>
            Whether some adjustments to the object need to be done or whether the Select-Object output can be simply passed through.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand._DisplayPropertySet">
            <summary>
            The set controlling what properties will be shown by default
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand._Pipeline">
            <summary>
            THe pipeline that is wrapped around Select-Object
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.BeginProcessing">
            <summary>
            Implements the begin action of the command
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.ProcessRecord">
            <summary>
            Implements the process action of the command
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.SelectDbaObjectCommand.EndProcessing">
            <summary>
            Implements the end action of the command
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand">
            <summary>
            Implements the Set-PSFConfig command
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.FullName">
            <summary>
            The full name of the setting
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.Module">
            <summary>
            The name of the module the setting belongs to.
            Is optional due to just specifying a name is legal, in which case the first name segment becomes the module name.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.Name">
            <summary>
            The name of the setting within a module.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.Value">
            <summary>
            The value to apply.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.PersistedValue">
            <summary>
            The persisted value to apply.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.PersistedType">
            <summary>
            The persisted type to apply.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.Description">
            <summary>
            Add documentation to the setting.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.Validation">
            <summary>
            The validation script to use.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.Handler">
            <summary>
            The handling script to apply when changing the value.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.Hidden">
            <summary>
            Whether the setting should be hidden from casual discovery.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.Default">
            <summary>
            Whether the setting should be applied only when nothing exists yet.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.Initialize">
            <summary>
            Whether this is the configuration initialization call.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.SimpleExport">
            <summary>
            Enabling this will cause the module to use friendly json notation on export to file.
            This may result in loss of data precision, but is more userfriendly.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.ModuleExport">
            <summary>
            Whether this setting applies to module scope file export.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.DisableValidation">
            <summary>
            Do not apply the validation script when changing values.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.DisableHandler">
            <summary>
            Do not run the handler script when changing values.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.PassThru">
            <summary>
            Return the changed configuration setting.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.EnableException">
            <summary>
            Enable throwing exceptions.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand._Config">
            <summary>
            The configuration item changed
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand._KillIt">
            <summary>
            Whether execution should be terminated silently.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand._Initialize">
            <summary>
            Whether this is an initialization execution.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand._Persisted">
            <summary>
            Whether persisted values need to be restored.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand._Exists">
            <summary>
            Whether the setting already exists.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand._PolicyEnforced">
            <summary>
            The setting to be affected was enforced by policy and cannot be changed by the user.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand._NameModule">
            <summary>
            Processed name of module.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand._NameName">
            <summary>
            Processed name of setting within module.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand._NameFull">
            <summary>
            Processed full name of setting.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand._ValidationErrorMessage">
            <summary>
            The reason validation failed.
            Filled by ApplyValue.
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.BeginProcessing">
            <summary>
            Implements the begin action of Set-PSFConfig
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.ProcessRecord">
            <summary>
            Implements the process action of Set-PSFConfig
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.ApplyValue(System.Object)">
            <summary>
            Applies a value to a configuration item, invoking validation and handler scriptblocks.
            </summary>
            <param name="Value">The value to apply</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.SetDbatoolsConfigCommand.ApplyCommonSettings">
            <summary>
            Abstracts out 
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand">
            <summary>
            Implements the Write-Message command, performing message handling and loggin
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.Level">
            <summary>
            This parameter represents the verbosity of the message. The lower the number, the more important it is for a human user to read the message.
            By default, the levels are distributed like this:
            - 1-3 Direct verbose output to the user (using Write-Host)
            - 4-6 Output only visible when requesting extra verbosity (using Write-Verbose)
            - 1-9 Debugging information, written using Write-Debug
            
            In addition, it is possible to select the level "Warning" which moves the message out of the configurable range:
            The user will always be shown this message, unless he silences the entire verbosity.
            
            Possible levels:
            Critical (1), Important / Output / Host (2), Significant (3), VeryVerbose (4), Verbose (5), SomewhatVerbose (6), System (7), Debug (8), InternalComment (9), Warning (666)
            Either one of the strings or its respective number will do as input.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.Message">
            <summary>
            The message to write/log. The function name and timestamp will automatically be prepended.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.Tag">
            <summary>
            Tags to add to the message written.
            This allows filtering and grouping by category of message, targeting specific messages.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.FunctionName">
            <summary>
            The name of the calling function.
            Will be automatically set, but can be overridden when necessary.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.ModuleName">
            <summary>
            The name of the module, the calling function is part of.
            Will be automatically set, but can be overridden when necessary.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.File">
            <summary>
            The file in which Write-Message was called.
            Will be automatically set, but can be overridden when necessary.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.Line">
            <summary>
            The line on which Write-Message was called.
            Will be automatically set, but can be overridden when necessary.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.ErrorRecord">
            <summary>
            If an error record should be noted with the message, add the full record here.
            Especially designed for use with Warning-mode, it can legally be used in either mode.
            The error will be added to the $Error variable and enqued in the logging/debugging system.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.Exception">
            <summary>
            Allows specifying an inner exception as input object. This will be passed on to the logging and used for messages.
            When specifying both ErrorRecord AND Exception, Exception wins, but ErrorRecord is still used for record metadata.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.Once">
            <summary>
            Setting this parameter will cause this function to write the message only once per session.
            The string passed here and the calling function's name are used to create a unique ID, which is then used to register the action in the configuration system.
            Thus will the lockout only be written if called once and not burden the system unduly.
            This lockout will be written as a hidden value, to see it use Get-DbaConfig -Force.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.OverrideExceptionMessage">
            <summary>
            Disables automatic appending of exception messages.
            Use in cases where you already have a speaking message interpretation and do not need the original message.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.Target">
            <summary>
            Add the object the message is all about, in order to simplify debugging / troubleshooting.
            For example, when calling this from a function targeting a remote computer, the computername could be specified here, allowing all messages to easily be correlated to the object processed.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.EnableException">
            <summary>
            This parameters disables user-friendly warnings and enables the throwing of exceptions.
            This is less user friendly, but allows catching exceptions in calling scripts.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.Breakpoint">
            <summary>
            Enables breakpoints on the current message. By default, setting '-Debug' will NOT cause an interrupt on the current position.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._timestamp">
            <summary>
            The start time of the cmdlet
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._silent">
            <summary>
            Whether this cmdlet is run in silent mode
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._fromStopFunction">
            <summary>
            Whether this cmdlet was called by Stop-Function
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._callStack">
            <summary>
            The current callstack
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._stackDepth">
            <summary>
            How many items exist on the callstack
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._message">
            <summary>
            The message to write
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._messageSimple">
            <summary>
            The message simplified without timestamps. Used for logging.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._messageColor">
            <summary>
            The message to write in color
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._messageDeveloper">
            <summary>
            Non-colored version of developermode
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._messageDeveloperColor">
            <summary>
            Colored version of developermode
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._writeHostScript">
            <summary>
            Scriptblock that writes the host messages
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._Tags">
            <summary>
            List of tags to process
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._isDebug">
            <summary>
            Whether debug mode is enabled
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._errorQualifiedMessage">
            <summary>
            The input message with the error content included if desired
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._MessageSystem">
            <summary>
            The final message to use for internal logging
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._MessageStreams">
            <summary>
            The final message to use for writing to streams, such as verbose or warning
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._MessageHost">
            <summary>
            The final message to use for host messages (write using Write-HostColor)
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._BreadCrumbsString">
            <summary>
            Provide breadcrumb queue of the callstack
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand._BreadCrumbsStringColored">
            <summary>
            Provide a breadcrumb queue of the callstack in color tags
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.BeginProcessing">
            <summary>
            Processes the begin phase of the cmdlet
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.ProcessRecord">
            <summary>
            Processes the process phase of the cmdlet
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.ResolveTarget(System.Object)">
            <summary>
            Processes the target transform rules on an input object
            </summary>
            <param name="Item">The item to transform</param>
            <returns>The transformed object</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.ResolveException(System.Exception)">
            <summary>
            Processes the specified exception specified
            </summary>
            <param name="Item">The exception to process</param>
            <returns>The transformed exception</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.ResolveLevel(Sqlcollaborative.Dbatools.Message.MessageLevel)">
            <summary>
            Processs the input level and apply policy and rules
            </summary>
            <param name="Level">The original level of the message</param>
            <returns>The processed level</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.GetMessage">
            <summary>
            Builds the message item for display of Verbose, Warning and Debug streams
            </summary>
            <returns>The message to return</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.GetMessageSimple">
            <summary>
            Builds the base message for internal system use.
            </summary>
            <returns>The message to return</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.GetMessageColor">
            <summary>
            Builds the message item if needed and returns it
            </summary>
            <returns>The message to return</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.GetMessageDeveloper">
            <summary>
            Non-host output in developermode
            </summary>
            <returns>The string to write on messages that don't go straight to Write-HostColor</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Commands.WriteMessageCommand.GetMessageDeveloperColor">
            <summary>
            Host output in developermode
            </summary>
            <returns>The string to write on messages that go straight to Write-HostColor</returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Computer.DiskSpace">
            <summary>
            Data Container for the output of Get-DbaDiskSpace
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.ComputerName">
            <summary>
            The computer that was scanned
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.Name">
            <summary>
            Name of the disk
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.Label">
            <summary>
            Label of the disk
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.Capacity">
            <summary>
            What's the total capacity of the disk?
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.Free">
            <summary>
            How much is still free?
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.PercentFree">
            <summary>
            How much is still free
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.BlockSize">
            <summary>
            What blocksize is the object set to
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.FileSystem">
            <summary>
            What filesystem is installed on the system
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.Type">
            <summary>
            What kind of drive is it?
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.IsSqlDisk">
            <summary>
            Whether the drive is a sql disk. Nullable, because it is an optional property and may not always be included, thus a third state is necessary.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.Server">
            <summary>
            The computer that was scanned. Legacy-Name
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.DriveType">
            <summary>
            The type of drive this is in the legacy string notation
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.SizeInBytes">
            <summary>
            The total capacity in Bytes
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.FreeInBytes">
            <summary>
            The free space in Bytes
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.SizeInKB">
            <summary>
            The total capacity in KB
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.FreeInKB">
            <summary>
            The free space in KB
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.SizeInMB">
            <summary>
            The total capacity in MB
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.FreeInMB">
            <summary>
            The free space in MB
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.SizeInGB">
            <summary>
            The total capacity in GB
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.FreeInGB">
            <summary>
            The free space in GB
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.SizeInTB">
            <summary>
            The total capacity in TB
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.FreeInTB">
            <summary>
            The free space in TB
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.SizeInPB">
            <summary>
            The total capacity in PB
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Computer.DiskSpace.FreeInPB">
            <summary>
            The free space in PB
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Computer.DriveType">
            <summary>
            What kind of drive are you?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.DriveType.Unknown">
            <summary>
            The drive type is not actually known
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.DriveType.NoRootDirectory">
            <summary>
            The drive has no root directory
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.DriveType.RemovableDisk">
            <summary>
            The drive is a removable disk
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.DriveType.LocalDisk">
            <summary>
            The drive is a local disk
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.DriveType.NetworkDrive">
            <summary>
            The drive is a network drive
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.DriveType.CompactDisk">
            <summary>
            The drive is a compact disk
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.DriveType.RAMDisk">
            <summary>
            The drive is a RAM disk
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Computer.PageFileSetting">
            <summary>
            Data container, listing pagefile settings.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.PageFileSetting.ComputerName">
            <summary>
            The name of the computer
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.PageFileSetting.AutoPageFile">
            <summary>
            Whether Automatic PageFile management is enabled
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.PageFileSetting.FileName">
            <summary>
            The pagefile name
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.PageFileSetting.Status">
            <summary>
            The pagefile status
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.PageFileSetting.SystemManaged">
            <summary>
            Whether the pagefile is system managed
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.PageFileSetting.LastModified">
            <summary>
            When were the settings last changed
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.PageFileSetting.LastAccessed">
            <summary>
            When were the settings last accessed
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.PageFileSetting.AllocatedBaseSize">
            <summary>
            The base allocated pagefile size in MB
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.PageFileSetting.InitialSize">
            <summary>
            The initial pagefile size in MB
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.PageFileSetting.MaximumSize">
            <summary>
            The maximum pagefile size in MB
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.PageFileSetting.PeakUsage">
            <summary>
            The maximum percent of the pagefile limit that has been used
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Computer.PageFileSetting.CurrentUsage">
            <summary>
            The currently used percentage of the pagefile limit that is in use.
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Configuration.Config">
            <summary>
            Configuration Manager as well as individual configuration object.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.Config.Name">
            <summary>
            The Name of the setting
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Configuration.Config.FullName">
            <summary>
            The full name of the configuration entry, comprised of both Module and Name.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.Config.Module">
            <summary>
            The module of the setting. Helps being able to group configurations.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.Config.Description">
            <summary>
            A description of the specific setting
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Configuration.Config.Type">
            <summary>
            The data type of the value stored in the configuration element.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Configuration.Config.Value">
            <summary>
            The value stored in the configuration element
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Configuration.Config.SafeValue">
            <summary>
            The value stored in the configuration element, but without deserializing objects.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Configuration.Config.Unchanged">
            <summary>
            Whether the value of the configuration setting has been changed since its initialization.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.Config.Handler">
            <summary>
            The handler script that is run whenever the configuration value is set.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.Config.Validation">
            <summary>
            Validates the user input
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.Config.Hidden">
            <summary>
            Setting this to true will cause the element to not be discovered unless using the '-Force' parameter on "Get-DbaConfig"
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Configuration.Config.Initialized">
            <summary>
            Whether the setting has been initialized. This handles module imports and avoids modules overwriting settings when imported in multiple runspaces.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.Config.PolicySet">
            <summary>
            Whether this setting was set by policy
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Configuration.Config.PolicyEnforced">
            <summary>
            Whether this setting was set by policy and forbids changes to the configuration.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.Config.SimpleExport">
            <summary>
            Enabling this causes export to json to use simple json serialization for data transmission.
            This is suitable for simple data that is not sensitive to conversion losses.
            Simple export leads to exports more easily readable to the human eye.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.Config.ModuleExport">
            <summary>
            Whether this setting should be exported to a module specific file when exporting to json by modulename.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Configuration.Config.RegistryData">
            <summary>
            The finalized value to put into the registry value when using policy to set this setting.
            Deprecated property.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.Config.DefaultValue">
            <summary>
            The default value the configuration item was set to when initializing
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Configuration.Config.SetPersistedValue(Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType,System.String)">
            <summary>
            Applies the persisted value to the configuration item.
            This method should only be called by PSFramework internals
            </summary>
            <param name="Type">The type of data being specified</param>
            <param name="ValueString">The value string to register</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Configuration.Config.ResetValue">
            <summary>
            Resets the configuration value to its configured default value
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Configuration.ConfigScope">
            <summary>
            The location where a setting was applied
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigScope.UserDefault">
            <summary>
            The configuration is set as default value for the user
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigScope.UserMandatory">
            <summary>
            The configuration is enforced for the user
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigScope.SystemDefault">
            <summary>
            The configuration is set as default value for all users on the system
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigScope.SystemMandatory">
            <summary>
            The configuration is enforced for all users on the system.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigScope.FileUserLocal">
            <summary>
            The configuration is stored as Json in the per user local machine config directory.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigScope.FileUserShared">
            <summary>
            The configuration is stored as Json in the per user config directory shared across machines.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigScope.FileSystem">
            <summary>
            The configuration is stored as Json in the local computer config directory.
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Configuration.ConfigurationHost">
            <summary>
            Host class providing static configuration settings that are constant across all runspaces within the process.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationHost.Configurations">
            <summary>
            Hashtable containing all the configuration entries
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationHost.Validation">
            <summary>
            Hashtable containing all the registered validations
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationHost.ImportFromRegistryDone">
            <summary>
            Whether the import from registry has been completed. Prevents multiple imports and overwrites when importing the module multiple times.
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Configuration.ConfigurationHost.ConvertToPersistedValue(System.Object)">
            <summary>
            Converts any object into its persisted state.
            </summary>
            <param name="Item">The item to convert.</param>
            <returns>Its persisted state representation.</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Configuration.ConfigurationHost.ConvertFromPersistedValue(System.String,Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType)">
            <summary>
            Converts a persisted value back to its original data type
            </summary>
            <param name="PersistedValue">The value in its persisted state</param>
            <param name="Type">The type of the persisted value</param>
            <returns>The natural state of the value originally persisted</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Configuration.ConfigurationHost.ConvertFromPersistedValue(System.String)">
            <summary>
            Converts a persisted value back to its original data type
            </summary>
            <param name="TypeQualifiedPersistedValue">The value in its persisted state, with a prefixed type identifier.</param>
            <returns>The natural state of the value originally persisted</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Configuration.ConfigurationHost.Utf8ToBase64(System.String)">
            <summary>
            Converts a plain text into a base64 string
            </summary>
            <param name="Value">The string to convert</param>
            <returns>base64 encoded version of string.</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Configuration.ConfigurationHost.Base64ToUtf8(System.String)">
            <summary>
            Converts a base64 encoded string into plain text
            </summary>
            <param name="Value">The string to convert</param>
            <returns>Plain Text string</returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Configuration.ConfigurationValue">
            <summary>
            Contains all information about a configuration item's value
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Configuration.ConfigurationValue.Value">
            <summary>
            The runtime value of the setting.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Configuration.ConfigurationValue.PersistedValue">
            <summary>
            The value in its persisted state
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValue.PersistedType">
            <summary>
            The kind of 
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Configuration.ConfigurationValue.TypeQualifiedPersistedValue">
            <summary>
            The type qualified representation of the persisted value
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Configuration.ConfigurationValue.SafeValue">
            <summary>
            Ensures wanton Get-PSFConfig will not deserialize persisted objects that might have registered deserialization in their module.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValue._Value">
            <summary>
            Internal storage for the Value property
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValue._PersistedValue">
            <summary>
            Internal storage for the PersistedValue property
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Configuration.ConfigurationValue.ToString">
            <summary>
            The string representation of its actual value
            </summary>
            <returns>Returns the type-qualified string representation of its value</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Configuration.ConfigurationValue.#ctor(System.String,Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType)">
            <summary>
            Creates a value object from persisted data
            </summary>
            <param name="PersistedValue">The value that will be persisted</param>
            <param name="PersistedType">The type of the value to be persisted</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Configuration.ConfigurationValue.#ctor(System.Object)">
            <summary>
            Creates a value object from runtime data
            </summary>
            <param name="Value">The value that will be stored</param>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType">
            <summary>
            The data types supported by the configuration system.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType.Unknown">
            <summary>
            An unknown type, should be prevented
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType.Null">
            <summary>
            The value is as empty as the void.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType.Bool">
            <summary>
            The value is of a true/false kind
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType.Int">
            <summary>
            The value is a regular integer
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType.Double">
            <summary>
            The value is a double numeric value
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType.Long">
            <summary>
            The value is a long type
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType.String">
            <summary>
            The value is a common string
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType.Timespan">
            <summary>
            The value is a regular timespan
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType.Datetime">
            <summary>
            The value is a plain datetime
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType.ConsoleColor">
            <summary>
            The value is a fancy console color
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType.Array">
            <summary>
            The value is an array full of booty
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType.Hashtable">
            <summary>
            The value is a hashtable
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Configuration.ConfigurationValueType.Object">
            <summary>
            The value is something indeterminate, but possibly complex
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Connection.ConnectionHost">
            <summary>
            Provides static tools for managing connections
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.Connections">
            <summary>
            List of all registered connections.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.BadConnectionTimeout">
            <summary>
            The time interval that must pass, before a connection using a known to not work connection protocol is reattempted
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.DisableCache">
            <summary>
            Globally disables all caching done by the Computer Management functions.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.DisableBadCredentialCache">
            <summary>
            Disables the caching of bad credentials. dbatools caches bad logon credentials for wmi/cim and will not reuse them.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.DisableCredentialAutoRegister">
            <summary>
            Disables the automatic registration of working credentials. dbatools will caches the last working credential when connecting using wmi/cim and will use those rather than using known bad credentials
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.OverrideExplicitCredential">
            <summary>
            Enabling this will force the use of the last credentials known to work, rather than even trying explicit credentials.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.EnableCredentialFailover">
            <summary>
            Enables automatic failover to working credentials, when passed credentials either are known, or turn out to not work.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.DisableCimPersistence">
            <summary>
            Globally disables the persistence of Cim sessions used to connect to a target system.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.DisableConnectionCimRM">
            <summary>
            Whether the CM connection using Cim over WinRM is disabled globally
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.DisableConnectionCimDCOM">
            <summary>
            Whether the CM connection using Cim over DCOM is disabled globally
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.DisableConnectionWMI">
            <summary>
            Whether the CM connection using WMI is disabled globally
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.DisableConnectionPowerShellRemoting">
            <summary>
            Whether the CM connection using PowerShell Remoting is disabled globally
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.SqlConnectionTimeout">
            <summary>
            The number of seconds before a sql connection attempt times out
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.PSSessions">
            <summary>
            List of all session containers used to maintain a cache
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ConnectionHost.PSSessionGet(System.Guid,System.String)">
            <summary>
            Returns a registered session for a given computer on a given runspace. Returns null if nothing is registered.
            </summary>
            <param name="Runspace">The host runspace that opened the session</param>
            <param name="ComputerName">The computer connected to</param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ConnectionHost.PSSessionSet(System.Guid,System.String,System.Management.Automation.Runspaces.PSSession)">
            <summary>
            Registeres a remote session under the owning runspace in its respective computer name
            </summary>
            <param name="Runspace">The runspace that owns the session</param>
            <param name="ComputerName">The computer the session connects to</param>
            <param name="Session">The session object</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ConnectionHost.PSSessionPurgeExpired">
            <summary>
            Searches the cache for an expired remoting session and purges it. After purging it from the list, it still needs to be closed!
            </summary>
            <returns>The session purged that then needs to be closed</returns>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.ConnectionHost.PSSessionCountExpired">
            <summary>
            The number of expired sessions 
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.PSSessionTimeout">
            <summary>
            The time until established connections will be considered expired (if available)
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ConnectionHost.PSSessionCacheEnabled">
            <summary>
            Whether sessions should be cached at all
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Connection.ManagementConnection">
            <summary>
            Contains management connection information for a windows server
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.ManagementConnection.ComputerName">
            <summary>
            The computer to connect to
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.ManagementConnection.DisableBadCredentialCache">
            <summary>
            Locally disables the caching of bad credentials
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.ManagementConnection.DisableCredentialAutoRegister">
            <summary>
            Locally disables the caching of working credentials
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.ManagementConnection.OverrideExplicitCredential">
            <summary>
            Locally overrides explicit credentials with working ones that were cached
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.ManagementConnection.EnableCredentialFailover">
            <summary>
            Locally enables automatic failover to working credentials, when passed credentials either are known, or turn out to not work.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.ManagementConnection.DisableCimPersistence">
            <summary>
            Locally disables the persistence of Cim sessions used to connect to a target system.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.ManagementConnection.DisabledConnectionTypes">
            <summary>
            Connectiontypes that will never be used
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.RestoreDefaultConfiguration">
            <summary>
            Restores all deviations from public policy back to default
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnection.OverrideConnectionPolicy">
            <summary>
            Whether this connection adhers to the global connection lockdowns or not
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.ManagementConnection.CimRM">
            <summary>
            Did the last connection attempt using CimRM work?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnection.LastCimRM">
            <summary>
            When was the last connection attempt using CimRM?
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.ManagementConnection.CimDCOM">
            <summary>
            Did the last connection attempt using CimDCOM work?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnection.LastCimDCOM">
            <summary>
            When was the last connection attempt using CimRM?
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.ManagementConnection.Wmi">
            <summary>
            Did the last connection attempt using Wmi work?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnection.LastWmi">
            <summary>
            When was the last connection attempt using CimRM?
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.ManagementConnection.PowerShellRemoting">
            <summary>
            Did the last connection attempt using PowerShellRemoting work?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnection.LastPowerShellRemoting">
            <summary>
            When was the last connection attempt using CimRM?
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.ReportSuccess(Sqlcollaborative.Dbatools.Connection.ManagementConnectionType)">
            <summary>
            Report the successful connection against the computer of this connection
            </summary>
            <param name="Type">What connection type succeeded?</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.ReportFailure(Sqlcollaborative.Dbatools.Connection.ManagementConnectionType)">
            <summary>
            Report the failure of connecting to the target computer
            </summary>
            <param name="Type">What connection type failed?</param>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnection.Credentials">
            <summary>
            Any registered credentials to use on the connection.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnection.WindowsCredentialsAreBad">
            <summary>
            Whether the default windows credentials are known to not work against the target.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnection.UseWindowsCredentials">
            <summary>
            Whether windows credentials are known to be good. Do not build conditions on them being false, just on true.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnection.KnownBadCredentials">
            <summary>
            Credentials known to not work. They will not be used when specified.
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.AddBadCredential(System.Management.Automation.PSCredential)">
            <summary>
            Adds a credentials object to the list of credentials known to not work.
            </summary>
            <param name="Credential">The bad credential that must be punished</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.AddGoodCredential(System.Management.Automation.PSCredential)">
            <summary>
            Reports a credentials object as being legit.
            </summary>
            <param name="Credential">The functioning credential that we may want to use again</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.GetCredential(System.Management.Automation.PSCredential)">
            <summary>
            Calculates, which credentials to use. Will consider input, compare it with know not-working credentials or use the configured working credentials for that.
            </summary>
            <param name="Credential">Any credential object a user may have explicitly specified.</param>
            <returns>The Credentials to use</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.IsBadCredential(System.Management.Automation.PSCredential)">
            <summary>
            Tests whether the input credential is on the list known, bad credentials
            </summary>
            <param name="Credential">The credential to test</param>
            <returns>True if the credential is known to not work, False if it is not yet known to not work</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.RemoveBadCredential(System.Management.Automation.PSCredential)">
            <summary>
            Removes an item from the list of known bad credentials
            </summary>
            <param name="Credential">The credential to remove</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.GetConnectionType(Sqlcollaborative.Dbatools.Connection.ManagementConnectionType,System.Boolean)">
            <summary>
            Returns the next connection type to try.
            </summary>
            <param name="ExcludedTypes">Exclude any type already tried and failed</param>
            <param name="Force">Overrides the timeout on bad connections</param>
            <returns>The next type to try.</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.GetConnectionTypesTimed(System.DateTime)">
            <summary>
            Returns a list of all available connection types whose inherent timeout has expired.
            </summary>
            <param name="Timestamp">All last connection failures older than this point in time are considered to be expired</param>
            <returns>A list of all valid connection types</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.GetConnectionTypesTimed(System.TimeSpan)">
            <summary>
            Returns a list of all available connection types whose inherent timeout has expired.
            </summary>
            <param name="Timespan">All last connection failures older than this far back into the past are considered to be expired</param>
            <returns>A list of all valid connection types</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.#ctor">
            <summary>
            Creates a new, empty connection object. Necessary for serialization.
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.#ctor(System.String)">
            <summary>
            Creates a new default connection object, containing only its computer's name and default results.
            </summary>
            <param name="ComputerName">The computer targeted. Will be forced to lowercase.</param>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.ManagementConnection.CimWinRMOptions">
            <summary>
            The options ot use when establishing a CIM Session
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.GetDefaultCimWsmanOptions">
            <summary>
            Returns the default wsman options object
            </summary>
            <returns>Something very default-y</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.GetCimRMInstance(System.Management.Automation.PSCredential,System.String,System.String)">
            <summary>
            Get all cim instances of the appropriate class using WinRM
            </summary>
            <param name="Credential">The credentiuls to use for the connection.</param>
            <param name="Class">The class to query.</param>
            <param name="Namespace">The namespace to look in (defaults to root\cimv2).</param>
            <returns>Hopefully a mountainload of CimInstances</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.QueryCimRMInstance(System.Management.Automation.PSCredential,System.String,System.String,System.String)">
            <summary>
            Get all cim instances matching the query using WinRM
            </summary>
            <param name="Credential">The credentiuls to use for the connection.</param>
            <param name="Query">The query to use requesting information.</param>
            <param name="Dialect">Defaults to WQL.</param>
            <param name="Namespace">The namespace to look in (defaults to root\cimv2).</param>
            <returns></returns>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.ManagementConnection.CimDComOptions">
            <summary>
            The options ot use when establishing a CIM Session
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.GetDefaultCimDcomOptions">
            <summary>
            Returns the default DCom options object
            </summary>
            <returns>Something very default-y</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.GetCimDComInstance(System.Management.Automation.PSCredential,System.String,System.String)">
            <summary>
            Get all cim instances of the appropriate class using DCOM
            </summary>
            <param name="Credential">The credentiuls to use for the connection.</param>
            <param name="Class">The class to query</param>
            <param name="Namespace">The namespace to look in (defaults to root\cimv2)</param>
            <returns>Hopefully a mountainload of CimInstances</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.QueryCimDCOMInstance(System.Management.Automation.PSCredential,System.String,System.String,System.String)">
            <summary>
            Get all cim instances matching the query using DCOM
            </summary>
            <param name="Credential">The credentiuls to use for the connection.</param>
            <param name="Query">The query to use requesting information.</param>
            <param name="Dialect">Defaults to WQL.</param>
            <param name="Namespace">The namespace to look in (defaults to root\cimv2).</param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.ManagementConnection.ToString">
            <summary>
            Simple string representation
            </summary>
            <returns>Returns the computerName it is connection for</returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Connection.ManagementConnectionProtocolState">
            <summary>
            The various types of state a connection-protocol may have
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnectionProtocolState.Unknown">
            <summary>
            The default initial state, before any tests are performed
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnectionProtocolState.Success">
            <summary>
            A successful connection was last established
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnectionProtocolState.Error">
            <summary>
            Connecting using the relevant protocol failed last it was tried
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnectionProtocolState.Disabled">
            <summary>
            The relevant protocol has been disabled and should not be used
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Connection.ManagementConnectionType">
            <summary>
            The various ways to connect to a windows server fopr management purposes.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnectionType.None">
            <summary>
            No Connection-Type
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnectionType.CimRM">
            <summary>
            Cim over a WinRM connection
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnectionType.CimDCOM">
            <summary>
            Cim over a DCOM connection
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnectionType.Wmi">
            <summary>
            WMI Connection
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.ManagementConnectionType.PowerShellRemoting">
            <summary>
            Connecting with PowerShell remoting and performing WMI queries locally
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Connection.PSSessionContainer">
            <summary>
            The container that lists all sessions for a given runspace
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.PSSessionContainer.Runspace">
            <summary>
            The runspace that owns the sessions
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Connection.PSSessionContainer.CountExpired">
            <summary>
            The count of expired sessions registered
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.PSSessionContainer.Sessions">
            <summary>
            List of sessions and their associated computer names
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.PSSessionContainer.ConnectionTimestamps">
            <summary>
            List of timestamps, when the last command was run against them
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.PSSessionContainer.#ctor(System.Guid)">
            <summary>
            Creates a list of sessions the current runspace is connected to.
            </summary>
            <param name="Runspace">The Guid of the runspace that is the owner of the registered sessions</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.PSSessionContainer.Get(System.String)">
            <summary>
            Returns the requested session.
            </summary>
            <param name="ComputerName">The name of the host whose connection to retrieve</param>
            <returns>The established connection to the host, null if none exists.</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.PSSessionContainer.Set(System.String,System.Management.Automation.Runspaces.PSSession)">
            <summary>
            Sets a session and writes its timestamp to the cache
            </summary>
            <param name="ComputerName">The hostname it connects to.</param>
            <param name="Session">The session that is being registered.</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.PSSessionContainer.GetExpiredNames">
            <summary>
            Returns the name of hostnames with expired sessions
            </summary>
            <returns>THe hostnames whose session has expired</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Connection.PSSessionContainer.PurgeExpiredSession">
            <summary>
            Removes an expired session from the cache, an returns it, so it can be properly closed.
            </summary>
            <returns>Returns a session to disconnect</returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Connection.SqlConnectionProtocol">
            <summary>
            The protocol to connect over via SMO
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.SqlConnectionProtocol.Any">
            <summary>
            Connect using any protocol available
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.SqlConnectionProtocol.TCP">
            <summary>
            Connect using TCP/IP
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Connection.SqlConnectionProtocol.NP">
            <summary>
            Connect using named pipes or shared memory
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Database.BackupHistory">
            <summary>
            Object containing the information about the history of mankind ... or a database backup. WHo knows.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.ComputerName">
            <summary>
            The name of the computer running MSSQL Server
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.InstanceName">
            <summary>
            The Instance that was queried
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.SqlInstance">
            <summary>
            The full Instance name as seen from outside
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.Database">
            <summary>
            The Database that was backed up
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.UserName">
            <summary>
            The user that is running the backup
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.Start">
            <summary>
            When was the backup started
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.End">
            <summary>
            When did the backup end
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.Duration">
            <summary>
            What was the longest duration among the backups
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.Path">
            <summary>
            Where is the backup stored
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.TotalSize">
            <summary>
            What is the total size of the backup
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.CompressedBackupSize">
            <summary>
            What is the total compressesed size of the backup
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.CompressionRatio">
            <summary>
            What is the ratio of total size to compressed size of the backup
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.Type">
            <summary>
            The kind of backup this was
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.BackupSetId">
            <summary>
            The ID for the Backup job
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.DeviceType">
            <summary>
            What kind of backup-device was the backup stored to
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.Software">
            <summary>
            What is the name of the backup software?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.FullName">
            <summary>
            The full name of the backup
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.FileList">
            <summary>
            The files that are part of this backup
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.Position">
            <summary>
            The position of the backup
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.FirstLsn">
            <summary>
            The first Log Sequence Number
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.DatabaseBackupLsn">
            <summary>
            The Log Squence Number that marks the beginning of the backup
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.CheckpointLsn">
            <summary>
            The checkpoint's Log Sequence Number
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.LastLsn">
            <summary>
            The last Log Sequence Number
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.SoftwareVersionMajor">
            <summary>
            The primary version number of the Sql Server
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.IsCopyOnly">
            <summary>
            Was the backup performed with the CopyOnlyOption
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.LastRecoveryForkGUID">
            <summary>
            Recovery Fork backup was takeon
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.BackupHistory.RecoveryModel">
            <summary>
            Recovery Model of the database when backup was taken
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Database.Dependency">
            <summary>
            Class containing all dependency information over a database object
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.Dependency.ComputerName">
            <summary>
            The name of the SQL server from whence the query came
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.Dependency.ServiceName">
            <summary>
            Name of the service running the database containing the dependency
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.Dependency.SqlInstance">
            <summary>
            The Instance the database containing the dependency is running in.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.Dependency.Dependent">
            <summary>
            The name of the dependent
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.Dependency.Type">
            <summary>
            The kind of object the dependent is
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.Dependency.Owner">
            <summary>
            The owner of the dependent (usually the Database)
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.Dependency.IsSchemaBound">
            <summary>
            Whether the dependency is Schemabound. If it is, then the creation statement order is of utmost importance.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.Dependency.Parent">
            <summary>
            The immediate parent of the dependent. Useful in multi-tier dependencies.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.Dependency.ParentType">
            <summary>
            The type of object the immediate parent is.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.Dependency.Script">
            <summary>
            The script used to create the object.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.Dependency.Tier">
            <summary>
            The tier in the dependency hierarchy tree. Used to determine, which dependency must be applied in which order.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.Dependency.Object">
            <summary>
            The smo object of the dependent.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.Dependency.Urn">
            <summary>
            The Uniform Resource Name of the dependent.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Database.Dependency.OriginalResource">
            <summary>
            The object of the original resource, from which the dependency hierachy has been calculated.
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord">
            <summary>
            An error record written by dbatools
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord.CategoryInfo">
            <summary>
            The category of the error
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord.ErrorDetails">
            <summary>
            The details on the error
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord.Exception">
            <summary>
            The actual exception thrown
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord.FullyQualifiedErrorId">
            <summary>
            The specific error identity, used to identify the target
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord.InvocationInfo">
            <summary>
            The details of how this was called.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord.ScriptStackTrace">
            <summary>
            The script's stacktrace
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord.TargetObject">
            <summary>
            The object being processed
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord.FunctionName">
            <summary>
            The name of the function throwing the error
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord.Timestamp">
            <summary>
            When was the error thrown
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord.Message">
            <summary>
            The message that was written in a userfriendly manner
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord.Runspace">
            <summary>
            The runspace the error occured on.
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord.#ctor">
            <summary>
            Create an empty record
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord.#ctor(System.Management.Automation.ErrorRecord,System.String,System.DateTime,System.String)">
            <summary>
            Create a filled out error record
            </summary>
            <param name="Record">The original error record</param>
            <param name="FunctionName">The function that wrote the error</param>
            <param name="Timestamp">When was the error generated</param>
            <param name="Message">What message was passed when writing the error</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.dbaSystem.DbaErrorRecord.#ctor(System.Management.Automation.ErrorRecord,System.String,System.DateTime,System.String,System.Guid)">
            <summary>
            Create a filled out error record
            </summary>
            <param name="Record">The original error record</param>
            <param name="FunctionName">The function that wrote the error</param>
            <param name="Timestamp">When was the error generated</param>
            <param name="Message">What message was passed when writing the error</param>
            <param name="Runspace">The ID of the runspace writing the error. Used to separate output between different runspaces in the same process.</param>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.dbaSystem.DebugHost">
            <summary>
            Hosts static debugging values and methods
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.DebugHost.ImportTimeEntries">
            <summary>
            Lists the duration for the last import of dbatools.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.dbaSystem.DebugHost.ImportTime">
            <summary>
            Returns the calculated time each phase took during the last import of dbatool.
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.dbaSystem.StartTimeEntry">
            <summary>
            Entry containing the information of a step during the import sequence
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.dbaSystem.StartTimeEntry.Action">
            <summary>
            The action that has been taken
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.dbaSystem.StartTimeEntry.Timestamp">
            <summary>
            When was the action taken?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.StartTimeEntry.Runspace">
            <summary>
            The runspace the entry was written on
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.dbaSystem.StartTimeEntry.#ctor(System.String,System.DateTime,System.Guid)">
            <summary>
            Creates a new StartTimeEntry
            </summary>
            <param name="Action">The action that has been taken</param>
            <param name="Timestamp">When was the action taken?</param>
            <param name="Runspace">The runspace the entry was written on</param>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.dbaSystem.StartTimeResult">
            <summary>
            The processed result how long a given step took
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.dbaSystem.StartTimeResult.Action">
            <summary>
            What action was taken?
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.dbaSystem.StartTimeResult.Duration">
            <summary>
            How long did things take?
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.dbaSystem.StartTimeResult.Start">
            <summary>
            When did this action start?
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.dbaSystem.StartTimeResult.End">
            <summary>
            When did this action end?
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.dbaSystem.StartTimeResult.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Creates a new StartTimeResult with all values preconfigured
            </summary>
            <param name="Action">The action that was taken</param>
            <param name="Start">When did the action start?</param>
            <param name="End">When did the action end?</param>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.dbaSystem.SystemHost">
            <summary>
            Provides system-wide static resources regarding the dbatools system runtime in general
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.SystemHost.UnattendedMode">
            <summary>
            When this is set to true, functions must assume dbatools is in unattended mode. May not ask for user input of any kind.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.dbaSystem.SystemHost.ModuleBase">
            <summary>
            Path where the module was located when imported
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.dbaSystem.SystemHost.ModuleImported">
            <summary>
            Flag whether the module has ever been imported in the current process. If that is true, several things (such as importing libraries) is no longer necessary and will be skipped on import.
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Discovery.DbaBrowserReply">
            <summary>
            The reply the browser service gave
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaBrowserReply.MachineName">
            <summary>
            The machine name of the computer
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaBrowserReply.ComputerName">
            <summary>
            the computername of the computer
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaBrowserReply.SqlInstance">
            <summary>
            The instance running on the computer
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaBrowserReply.InstanceName">
            <summary>
            The name of the instance, running on the computer
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaBrowserReply.TCPPort">
            <summary>
            The port number the instance is running under
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaBrowserReply.Version">
            <summary>
            The version of the SQL Server
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaBrowserReply.IsClustered">
            <summary>
            Whether the instance is part of a cluster or no.
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Discovery.DbaBrowserReply.ToString">
            <summary>
            Override in order to make it look neater in PowerShell
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Discovery.DbaInstanceAvailability">
            <summary>
            Indiciator for whether an instance is known to be available or not
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceAvailability.Unknown">
            <summary>
            It is not known, whether the instance is available or not
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceAvailability.Available">
            <summary>
            The instance is known to be available
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceAvailability.Unavailable">
            <summary>
            The instance is known to be not available
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Discovery.DbaInstanceConfidenceLevel">
            <summary>
            How high is our confidence that this is a valid instance?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceConfidenceLevel.None">
            <summary>
            No confidence at all. There is virtually no way for this to be an instance
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceConfidenceLevel.Low">
            <summary>
            We have a few indications, but couldn't follow them up
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceConfidenceLevel.Medium">
            <summary>
            We're fairly sure this is legit, but can't guarantee it
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceConfidenceLevel.High">
            <summary>
            This absolutely is an instance
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Discovery.DbaInstanceDiscoveryType">
            <summary>
            What discovery mechanisms to use
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceDiscoveryType.IPRange">
            <summary>
            We shall sweep the network for instances, by targeting every IP within a range.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceDiscoveryType.Domain">
            <summary>
            We shall search for SQL SPNs in active directory
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceDiscoveryType.DataSourceEnumeration">
            <summary>
            We shall use the SSMS Data Sizrce Enumeration mechanism and hope for the best
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceDiscoveryType.All">
            <summary>
            We shall use all tools in our control to find stuff
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport">
            <summary>
            The report on a discovered instance
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.MachineName">
            <summary>
            The computername of the underlying machine. Usually equal to the computername, but may differ in case of clusters
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.ComputerName">
            <summary>
            The computername of the target
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.InstanceName">
            <summary>
            The name of the instance
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.FullName">
            <summary>
            The full server instance name
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.SqlInstance">
            <summary>
            The full name usable to connect via SMO
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.Port">
            <summary>
            The port number the server listens on
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.Timestamp">
            <summary>
            When the scan was concluded
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.TcpConnected">
            <summary>
            Was a TCP connect successful?
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.SqlConnected">
            <summary>
            Was a connection via SQL successful (even if we got access denied)
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.DnsResolution">
            <summary>
            The DNS Resolution object
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.Ping">
            <summary>
            The ping resolution object
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.BrowseReply">
            <summary>
            The reply received from the browse request
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.Services">
            <summary>
            The windows services for the instance
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.SystemServices">
            <summary>
            The SQL Server services that do not belong to that instance alone
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.SPNs">
            <summary>
            Service Principal Names found
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.PortsScanned">
            <summary>
            The ports that have been scanned
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.Availability">
            <summary>
            What we know about its availability
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.Confidence">
            <summary>
            How confident we are, that this is a real instance
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport.ScanTypes">
            <summary>
            What we used to scan the instance
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Discovery.DbaInstanceScanType">
            <summary>
            The mechanisms we use to determine, whether a given host contains a legit instance
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceScanType.TCPPort">
            <summary>
            Try connecting to specific ports
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceScanType.SqlConnect">
            <summary>
            Try to connect to discovered instances (improves confidence)
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceScanType.SqlService">
            <summary>
            Check the windows services on the target
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceScanType.DNSResolve">
            <summary>
            Try resolving a computername in DNS
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceScanType.SPN">
            <summary>
            Scan the SPNs for the targeted computer
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceScanType.Browser">
            <summary>
            Try contacting the local browser service and demand answers
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceScanType.Ping">
            <summary>
            See whether you can ping the host
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceScanType.All">
            <summary>
            Do EVERYTHING
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaInstanceScanType.Default">
            <summary>
            Do all the things we consider sane defaults
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Discovery.DbaPortReport">
            <summary>
            We tried to connect to a port, how did it go?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaPortReport.ComputerName">
            <summary>
            The name of the computer connected to
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaPortReport.Port">
            <summary>
            The number of the port we tried to connect to.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Discovery.DbaPortReport.IsOpen">
            <summary>
            Whether the port was open
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Discovery.DbaPortReport.#ctor">
            <summary>
            Creates an empty report (serialization uses this)
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Discovery.DbaPortReport.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a filled in report
            </summary>
            <param name="ComputerName">The name of the computer connected to</param>
            <param name="Port">The port we tried to connect to</param>
            <param name="IsOpen">Whether things worked out</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Discovery.DbaPortReport.ToString">
            <summary>
            Displays port connection reports in a user friendly manner
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Exceptions.BloodyHellGiveMeSomethingToWorkWithException">
            <summary>
            An exception that is thrown by parameter classes when given empty input
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Exceptions.BloodyHellGiveMeSomethingToWorkWithException.ParameterClass">
            <summary>
            The parameter class that did the throwing
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Exceptions.BloodyHellGiveMeSomethingToWorkWithException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an exception with a message and a nested exception
            </summary>
            <param name="Message">The message to tell</param>
            <param name="Inner">The inner exception to nest</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Exceptions.BloodyHellGiveMeSomethingToWorkWithException.#ctor(System.String,System.String)">
            <summary>
            Creates an exception with a message and a ParameterClass
            </summary>
            <param name="Message">The message to tell</param>
            <param name="ParameterClass">The Parameter Class that threw the exception</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Exceptions.BloodyHellGiveMeSomethingToWorkWithException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            Creates an exception with a message, a nested exception and a ParameterClass
            </summary>
            <param name="Message">The message to tell</param>
            <param name="Inner">The inner exception to nest</param>
            <param name="ParameterClass">The Parameter Class that threw the exception</param>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.General.ExecutionMode">
            <summary>
            What kind of mode do you want to run a command in?
            This allows the user to choose how a dbatools function handles a bump in the execution where terminating directly may not be actually mandated.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.General.ExecutionMode.Strict">
            <summary>
            When encountering issues, terminate, or skip the currently processed input, rather than continue.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.General.ExecutionMode.Lazy">
            <summary>
            Continue as able with a best-effort attempt. Simple verbose output should do the rest.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.General.ExecutionMode.Report">
            <summary>
            Continue, but provide output that can be used to identify the operations that had issues.
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Maintenance.MaintenanceHost">
            <summary>
            Host class providing access to resources need to perform dbatools maintenance
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Maintenance.MaintenanceHost.Tasks">
            <summary>
            The register of available tasks.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Maintenance.MaintenanceHost.HasDueTasks">
            <summary>
            Whether there are any due tasks
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Maintenance.MaintenanceHost.GetNextTask(System.String[])">
            <summary>
            Returns the next task to perform. Returns null when there are no more tasks to perform
            </summary>
            <param name="Exclusions">List of tasks not to return, even if they are ready to execute again. This avoids one misconfigured task starving all lower priority tasks</param>
            <returns>The next task to perform.</returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Maintenance.MaintenancePriority">
            <summary>
            How high the priority of the task. Higher priority tasks take precedence over low priority tasks.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Maintenance.MaintenancePriority.Trivial">
            <summary>
            This task is completely trivial and can be done whenever there is some spare time for it
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Maintenance.MaintenancePriority.Low">
            <summary>
            The task is not very significant, but should be dealt with at some point
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Maintenance.MaintenancePriority.Medium">
            <summary>
            Average priority task
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Maintenance.MaintenancePriority.High">
            <summary>
            An important task that will take precedence over most other tasks
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Maintenance.MaintenancePriority.Critical">
            <summary>
            A task so critical, that it should be considered to move it to synchronous execution instead.
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Maintenance.MaintenanceTask">
            <summary>
            An individual task assigned to the maintenance engine
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Maintenance.MaintenanceTask.Name">
            <summary>
            The name of the task to execute. No duplciates are possible.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Maintenance.MaintenanceTask.Once">
            <summary>
            Whether the task should be done once only
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Maintenance.MaintenanceTask.Interval">
            <summary>
            The interval at which the task should be performed
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Maintenance.MaintenanceTask.Delay">
            <summary>
            If the task need not be performed right away, it can be delayed, in order to prioritize more important initialization tasks
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Maintenance.MaintenanceTask.Registered">
            <summary>
            When was the task first registered. Duplicate registration calls will not increment this value.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Maintenance.MaintenanceTask.LastExecution">
            <summary>
            When was the task last executed.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Maintenance.MaintenanceTask.Priority">
            <summary>
            How important is this task?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Maintenance.MaintenanceTask.ScriptBlock">
            <summary>
            The task code to execute
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Maintenance.MaintenanceTask.IsDue">
            <summary>
            Whether the task is due and should be executed
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Message.DbatoolsException">
            <summary>
            Wrapper class that can emulate any exception for purpose of serialization without blowing up the storage space consumed
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.DbatoolsException.GetException">
            <summary>
            Returns the original exception object that we interpreted. This is on purpose not a property, as we want to avoid messing with serialization size.
            </summary>
            <returns>The original exception that got thrown</returns>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.Message">
            <summary>
            The actual Exception Message
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.Source">
            <summary>
            The original source of the Exception
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.StackTrace">
            <summary>
            Where on the callstack did the exception occur?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.TargetSite">
            <summary>
            What was the target site on the code that caused it. This property has been altered to avoid export issues, if a string representation is not sufficient, access the original exception using GetException()
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.HResult">
            <summary>
            The HResult of the exception. Useful in debugging native code errors.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.HelpLink">
            <summary>
            Link to a proper help article.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.Data">
            <summary>
            Additional data that has been appended
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.InnerException">
            <summary>
            The inner exception in a chain of exceptions.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.ExceptionTypeName">
            <summary>
            The full namespace name of the exception that has been wrapped.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.ExceptionData">
            <summary>
            Contains additional properties other exceptions might contain.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.CategoryInfo">
            <summary>
            The category of the error
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.ErrorDetails">
            <summary>
            The details on the error
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.FullyQualifiedErrorId">
            <summary>
            The specific error identity, used to identify the target
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.InvocationInfo">
            <summary>
            The details of how this was called.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.ScriptStackTrace">
            <summary>
            The script's stacktrace
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.TargetObject">
            <summary>
            The object being processed
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.FunctionName">
            <summary>
            The name of the function throwing the error
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.Timestamp">
            <summary>
            When was the error thrown
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.Runspace">
            <summary>
            The runspace the error occured on.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsException.ComputerName">
            <summary>
            The computer the error occured on.
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.DbatoolsException.#ctor">
            <summary>
            Creates an empty exception object. Mostly for serialization support
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.DbatoolsException.#ctor(System.Exception)">
            <summary>
            Creates an exception based on an original exception object
            </summary>
            <param name="Except">The exception to wrap around</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.DbatoolsException.#ctor(System.Management.Automation.ErrorRecord)">
            <summary>
            Creates a rich information exception object based on a full error record as recorded by PowerShell
            </summary>
            <param name="Record">The error record to copy from</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.DbatoolsException.#ctor(System.Exception,System.String,System.DateTime,System.String,System.Guid,System.String)">
            <summary>
            Creates a new exception object with rich meta information from the PowerShell runtime.
            </summary>
            <param name="Except">The exception thrown</param>
            <param name="FunctionName">The name of the function in which the error occured</param>
            <param name="Timestamp">When did the error occur</param>
            <param name="Message">The message to add to the exception</param>
            <param name="Runspace">The ID of the runspace from which the exception was thrown. Useful in multi-runspace scenarios.</param>
            <param name="ComputerName">The computer the error occured on.</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.DbatoolsException.#ctor(System.Management.Automation.ErrorRecord,System.String,System.DateTime,System.String,System.Guid,System.String)">
            <summary>
            Creates a new exception object with rich meta information from the PowerShell runtime.
            </summary>
            <param name="Record">The error record written</param>
            <param name="FunctionName">The name of the function in which the error occured</param>
            <param name="Timestamp">When did the error occur</param>
            <param name="Message">The message to add to the exception</param>
            <param name="Runspace">The ID of the runspace from which the exception was thrown. Useful in multi-runspace scenarios.</param>
            <param name="ComputerName">The computer the error occured on.</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.DbatoolsException.ToString">
            <summary>
            Returns a string representation of the exception.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Message.DbatoolsExceptionRecord">
            <summary>
            Carrier class, designed to hold an arbitrary number of exceptions. Used for exporting to XML in nice per-incident packages.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsExceptionRecord.Runspace">
            <summary>
            Runspace where shit happened.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsExceptionRecord.ComputerName">
            <summary>
            The computer name the exception was written on
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsExceptionRecord.Timestamp">
            <summary>
            When did things go bad?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsExceptionRecord.FunctionName">
            <summary>
            Name of the function, where fail happened.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsExceptionRecord.ModuleName">
            <summary>
            The module of the function where fail happened
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsExceptionRecord.Tags">
            <summary>
            The tags that were applied to the failure
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsExceptionRecord.Message">
            <summary>
            The message the poor user was shown.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.DbatoolsExceptionRecord.ExceptionType">
            <summary>
            Displays the name of the exception, the make scanning exceptions easier.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.DbatoolsExceptionRecord.TargetObject">
            <summary>
            The target object of the first exception in the list, if any
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.DbatoolsExceptionRecord.Exceptions">
            <summary>
            List of Exceptions that are part of the incident (usually - but not always - only one).
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.DbatoolsExceptionRecord.#ctor">
            <summary>
            Creates an empty container. Ideal for the homeworker who loves doing it all himself.
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.DbatoolsExceptionRecord.#ctor(Sqlcollaborative.Dbatools.Message.DbatoolsException)">
            <summary>
            Creates a container filled with the first exception.
            </summary>
            <param name="Exception"></param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.DbatoolsExceptionRecord.#ctor(System.Guid,System.String,System.DateTime,System.String,System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Creates a container filled with the meta information but untouched by exceptions
            </summary>
            <param name="Runspace">The runspace where it all happened</param>
            <param name="ComputerName">The computer the error was recorded</param>
            <param name="Timestamp">When did it happen?</param>
            <param name="FunctionName">Where did it happen?</param>
            <param name="ModuleName">The name of the module where fail happened</param>
            <param name="Tags">The tags that were assigned to the failure</param>
            <param name="Message">What did the witness have to say?</param>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Message.LogEntry">
            <summary>
            An individual entry for the message log
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntry.Message">
            <summary>
            The message logged
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntry.Type">
            <summary>
            What kind of entry was this?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntry.Timestamp">
            <summary>
            When was the message logged?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntry.FunctionName">
            <summary>
            What function wrote the message
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntry.ModuleName">
            <summary>
            The name of the module of the function that wrote the message
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntry.Tags">
            <summary>
            The tags applied to the message
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntry.Level">
            <summary>
            What level was the message?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntry.Runspace">
            <summary>
            What runspace was the message written from?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntry.ComputerName">
            <summary>
            The computer the message was generated on
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntry.TargetObject">
            <summary>
            The object that was the focus of this message.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntry.File">
            <summary>
            The file from which the message was written.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntry.Line">
            <summary>
            The line on which the message was written.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntry.CallStack">
            <summary>
            The callstack when the message was written.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntry.Username">
            <summary>
            The user that did the writing.
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.LogEntry.#ctor">
            <summary>
            Creates an empty log entry
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.LogEntry.#ctor(System.String,Sqlcollaborative.Dbatools.Message.LogEntryType,System.DateTime,System.String,System.String,System.Collections.Generic.List{System.String},Sqlcollaborative.Dbatools.Message.MessageLevel,System.Guid,System.String,System.Object,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Management.Automation.CallStackFrame},System.String)">
            <summary>
            Creates a filled out log entry
            </summary>
            <param name="Message">The message that was logged</param>
            <param name="Type">The type(s) of message written</param>
            <param name="Timestamp">When was the message logged</param>
            <param name="FunctionName">What function wrote the message</param>
            <param name="ModuleName">Name of the module the function writing this message came from</param>
            <param name="Tags">Tags that were applied to the message</param>
            <param name="Level">What level was the message written at.</param>
            <param name="Runspace">The ID of the runspace that wrote the message.</param>
            <param name="ComputerName">The computer the message was generated on.</param>
            <param name="TargetObject">The object this message was all about.</param>
            <param name="File">The file of the code that wrote the message.</param>
            <param name="Line">The line on which the message was written.</param>
            <param name="CallStack">The callstack that triggered the write.</param>
            <param name="Username">The user responsible for running the code that is writing the message.</param>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Message.LogEntryType">
            <summary>
            The kind of information the logged entry was.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntryType.None">
            <summary>
            This entry wasn't written to any stream
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntryType.Information">
            <summary>
            A message that was written to the current host equivalent, if available also to the information stream
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntryType.Verbose">
            <summary>
            A message that was written to the verbose stream
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntryType.Debug">
            <summary>
            A message that was written to the Debug stream
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogEntryType.Warning">
            <summary>
            A message written to the warning stream
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Message.LogHost">
            <summary>
            Provides static information storage for logging related settings, as well as housing the logging queues.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogHost.MaxErrorCount">
            <summary>
            The maximum numbers of error records maintained in-memory.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogHost.MaxMessageCount">
            <summary>
            The maximum number of messages that can be maintained in the in-memory message queue
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogHost.MaxMessagefileBytes">
            <summary>
            The maximum size of a given logfile. When reaching this limit, the file will be abandoned and a new log created. Set to 0 to not limit the size.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogHost.MaxMessagefileCount">
            <summary>
            The maximum number of logfiles maintained at a time. Exceeding this number will cause the oldest to be culled. Set to 0 to disable the limit.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogHost.MaxErrorFileBytes">
            <summary>
            The maximum size all error files combined may have. When this number is exceeded, the oldest entry is culled.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogHost.MaxTotalFolderSize">
            <summary>
            This is the upper limit of length all items in the log folder may have combined across all processes.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogHost.LoggingPath">
            <summary>
            Path to where the logfiles live.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogHost.MaxLogFileAge">
            <summary>
            Any logfile older than this will automatically be cleansed
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogHost.MessageLogFileEnabled">
            <summary>
            Governs, whether a log file for the system messages is written
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogHost.MessageLogEnabled">
            <summary>
            Governs, whether a log of recent messages is kept in memory
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogHost.ErrorLogFileEnabled">
            <summary>
            Governs, whether log files for errors are written
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogHost.ErrorLogEnabled">
            <summary>
            Governs, whether a log of recent errors is kept in memory
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogHost.OutQueueError">
            <summary>
            The outbound queue for errors. These will be processed and written to xml
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.LogHost.OutQueueLog">
            <summary>
            The outbound queue for logs. These will be processed and written to logfile
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.LogHost.GetErrors">
            <summary>
            Retrieves a copy of the Error stack
            </summary>
            <returns>All errors thrown by functions using the message or flowcontrol system</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.LogHost.GetLog">
            <summary>
            Retrieves a copy of the message log
            </summary>
            <returns>All messages logged this session.</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.LogHost.WriteErrorEntry(System.Management.Automation.ErrorRecord[],System.String,System.String,System.Collections.Generic.List{System.String},System.DateTime,System.String,System.Guid,System.String)">
            <summary>
            Write an error record to the log
            </summary>
            <param name="Record">The actual error record as powershell wrote it</param>
            <param name="FunctionName">The name of the function writing the error</param>
            <param name="ModuleName">The name of the module the function writing the error came from</param>
            <param name="Tags">The tags that were assigned to the error event</param>
            <param name="Timestamp">When was the error written</param>
            <param name="Message">What message was passed to the user</param>
            <param name="Runspace">The runspace the message was written from</param>
            <param name="ComputerName">The computer the error was written on</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.LogHost.WriteLogEntry(System.String,Sqlcollaborative.Dbatools.Message.LogEntryType,System.DateTime,System.String,System.String,System.Collections.Generic.List{System.String},Sqlcollaborative.Dbatools.Message.MessageLevel,System.Guid,System.String,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Management.Automation.CallStackFrame},System.String,System.Object)">
            <summary>
            Write a new entry to the log
            </summary>
            <param name="Message">The message to log</param>
            <param name="Type">The type of the message logged</param>
            <param name="Timestamp">When was the message generated</param>
            <param name="FunctionName">What function wrote the message</param>
            <param name="ModuleName">What module did the function writing this message come from?</param>
            <param name="Tags">The tags that were applied to the message</param>
            <param name="Level">At what level was the function written</param>
            <param name="Runspace">The runspace the message is coming from</param>
            <param name="ComputerName">The computer the message was generated on</param>
            <param name="File">The file from which the message was written</param>
            <param name="Line">The line on which the message was written</param>
            <param name="TargetObject">The object associated with a given message.</param>
            <param name="CallStack">The callstack at the moment the message was written.</param>
            <param name="Username">The name of the user under which the code being executed</param>
            <returns>The entry that is being written</returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Message.MessageEventSubscription">
            <summary>
            Condition and logic to be executed on message events
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.Name">
            <summary>
            Name of the event subscription, must be unique.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.ScriptBlock">
            <summary>
            Scriptblock to execute if the condition is met
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageEventSubscription._MessageFilter">
            <summary>
            The internally stored filter value for Message
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.MessageFilter">
            <summary>
            The value the Message is filtered by
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.MessageFilterSet">
            <summary>
            Whether filtering by Message was enabled
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageEventSubscription._ModuleNameFilter">
            <summary>
            The internally stored filter value for ModuleName
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.ModuleNameFilter">
            <summary>
            The value the ModuleName is filtered by
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.ModuleNameFilterSet">
            <summary>
            Whether filtering by ModuleName was enabled
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageEventSubscription._FunctionNameFilter">
            <summary>
            The internally stored filter value for FunctionName
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.FunctionNameFilter">
            <summary>
            The value the FunctionName is filtered by
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.FunctionNameFilterSet">
            <summary>
            Whether filtering by FunctionName was enabled
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageEventSubscription._TargetFilter">
            <summary>
            The internally stored filter value for Target
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.TargetFilter">
            <summary>
            The value the Target is filtered by
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.TargetFilterSet">
            <summary>
            Whether filtering by Target was enabled
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageEventSubscription._LevelFilter">
            <summary>
            The internally stored filter value for Level
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.LevelFilter">
            <summary>
            The value the Level is filtered by
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.LevelFilterSet">
            <summary>
            Whether filtering by Level was enabled
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageEventSubscription._TagFilter">
            <summary>
            The internally stored filter value for Tag
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.TagFilter">
            <summary>
            The value the Tag is filtered by
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.TagFilterSet">
            <summary>
            Whether filtering by Tag was enabled
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageEventSubscription._RunspaceFilter">
            <summary>
            The internally stored filter value for Runspace
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.RunspaceFilter">
            <summary>
            The value the Runspace is filtered by
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.RunspaceFilterSet">
            <summary>
            Whether filtering by Runspace was enabled
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.MessageEventSubscription.Applies(Sqlcollaborative.Dbatools.Message.LogEntry)">
            <summary>
            Checks, whether a given entry matches the filter defined in this subscription
            </summary>
            <param name="Entry">The entry to validate</param>
            <returns>Whether the subscription should react to this entry</returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Message.MessageHost">
            <summary>
            Provides static resources to the messaging subsystem
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.MaximumInformation">
            <summary>
            The maximum message level to still display to the user directly.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.MaximumVerbose">
            <summary>
            The maxium message level where verbose information is still written.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.MaximumDebug">
            <summary>
            The maximum message level where debug information is still written.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.MinimumInformation">
            <summary>
            The minimum required message level for messages that will be shown to the user.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.MinimumVerbose">
            <summary>
            The minimum required message level where verbose information is written.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.MinimumDebug">
            <summary>
            The minimum required message level where debug information is written.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.InfoColor">
            <summary>
            The color stuff gets written to the console in
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.InfoColorEmphasis">
            <summary>
            The color important stuff gets written to the console in
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.InfoColorSubtle">
            <summary>
            The color background stuff gets written to the console in
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.DeveloperColor">
            <summary>
            The color stuff gets written to the console in, when developer mode is enabled and the message would not have been written after all
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.DeveloperMode">
            <summary>
            Enables the developer mode. In this all messages are written to the console, in order to make it easier to troubleshoot issues.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.NestedLevelDecrement">
            <summary>
            Message levels can decrease by nested level. This causes messages to have an increasingly reduced level as the size of the callstack increases. 
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.DisableVerbosity">
            <summary>
            Globally override all verbosity
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.EnableMessageTimestamp">
            <summary>
            Include message timestamps in verbose message output
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.EnableMessageDisplayCommand">
            <summary>
            Include the message display command in the verbose message output
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.EnableMessageBreadcrumbs">
            <summary>
            Include the entire callstack in the verbose message output
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.TransformErrorQueueSize">
            <summary>
            The size of the transform error queue. When adding more than this, the oldest entry will be discarded
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.ExceptionTransforms">
            <summary>
            Provides the option to transform exceptions based on the original exception type
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.TargetTransforms">
            <summary>
            Provides the option to transform target objects based on type. This is sometimes important when working with live state objects that should not be serialized.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.TransformErrors">
            <summary>
            The list of transformation errors that occured.
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.MessageHost.GetTransformErrors">
            <summary>
            Returns the current queue of failed transformations
            </summary>
            <returns>The list of transformations that failed</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.MessageHost.WriteTransformError(System.Management.Automation.ErrorRecord,System.String,System.String,System.Object,Sqlcollaborative.Dbatools.Message.TransformType,System.Guid)">
            <summary>
            Writes a new transform error
            </summary>
            <param name="Record">The record of what went wrong</param>
            <param name="FunctionName">The name of the function writing the transformed message</param>
            <param name="ModuleName">The module the function writing the transformed message is part of</param>
            <param name="Object">The object that should have been transformed</param>
            <param name="Type">The type of transform that was attempted</param>
            <param name="Runspace">The runspace it all happened on</param>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.ExceptionTransformList">
            <summary>
            List of custom transforms for exceptions
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.TargetTransformlist">
            <summary>
            List of custom transforms for targets
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.MessageLevelModifiers">
            <summary>
            List of all modifiers that apply to message levels
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageHost.Events">
            <summary>
            List of events that subscribe to messages being written
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Message.MessageLevel">
            <summary>
            The various levels of verbosity available.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevel.Critical">
            <summary>
            Very important message, should be shown to the user as a high priority
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevel.Important">
            <summary>
            Important message, the user should read this
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevel.Output">
            <summary>
            Important message, the user should read this
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevel.Significant">
            <summary>
            Message relevant to the user.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevel.VeryVerbose">
            <summary>
            Not important to the regular user, still of some interest to the curious
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevel.Verbose">
            <summary>
            Background process information, in case the user wants some detailed information on what is currently happening.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevel.SomewhatVerbose">
            <summary>
            A footnote in current processing, rarely of interest to the user
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevel.System">
            <summary>
            A message of some interest from an internal system persepctive, but largely irrelevant to the user.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevel.Debug">
            <summary>
            Something only of interest to a debugger
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevel.InternalComment">
            <summary>
            This message barely made the cut from being culled. Of purely development internal interest, and even there is 'interest' a strong word for it.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevel.Warning">
            <summary>
            This message is a warning, sure sign something went badly wrong
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Message.MessageLevelModifier">
            <summary>
            A modification to a given message's level
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevelModifier.Name">
            <summary>
            Name of the modifier. Prevents duplication in a multi-runspace scenario.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevelModifier.Modifier">
            <summary>
            The amount to modify the level by
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevelModifier.IncludeFunctionName">
            <summary>
            Apply modifier only to messages from this function.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevelModifier.ExcludeFunctionName">
            <summary>
            Apply modifier not when the message is written by this function.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevelModifier.IncludeModuleName">
            <summary>
            Apply modifier only to messages from this module
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevelModifier.ExcludeModuleName">
            <summary>
            Do not apply modifier to messages from this module
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevelModifier.IncludeTags">
            <summary>
            Only apply this modifier to a message that includes at least one of these tags
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.MessageLevelModifier.ExcludeTags">
            <summary>
            Do not apply this modifier to a message that includes any of the following tags
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.MessageLevelModifier.AppliesTo(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Tests, whether a message a message should be modified by this modiier
            </summary>
            <param name="FunctionName">The name of the function writing the message</param>
            <param name="ModuleName">The name of the module, the function writing this message comes from</param>
            <param name="Tags">The tags of the message written</param>
            <returns>Whether the message applies</returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Message.TransformCondition">
            <summary>
            A condition, under which the object shall be transaformed
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.TransformCondition.TypeName">
            <summary>
            Name of the type. All similar types (as determined by the '-like' operator) will be transformed.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.TransformCondition.ModuleName">
            <summary>
            The name of the module to consider, using the -Like operator
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.TransformCondition.FunctionName">
            <summary>
            The name of the function name to consider, using the -Like operator
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.TransformCondition.ScriptBlock">
            <summary>
            The scriptblock that performs the transformation
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.TransformCondition.Type">
            <summary>
            What kind of transformation is being performed?
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.TransformCondition.#ctor(System.String,System.String,System.String,System.Management.Automation.ScriptBlock,Sqlcollaborative.Dbatools.Message.TransformType)">
            <summary>
            Initializes a transform condition
            </summary>
            <param name="TypeName">Only objects of similar name will be transformed</param>
            <param name="ModuleName">Only objects coming from similar modules will be considered</param>
            <param name="FunctionName">Only objects coming from similar functions will be considered</param>
            <param name="ScriptBlock">The scriptblock used for the transformation</param>
            <param name="Type">What kind of transformation this is</param>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Message.TransformError">
            <summary>
            An error occured during a message transformation
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.TransformError.Record">
            <summary>
            The error record of what went wrong
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.TransformError.FunctionName">
            <summary>
            The name of the function writing the message that failed to transform
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.TransformError.ModuleName">
            <summary>
            The name of the module the command writing the message came from
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.TransformError.Timestamp">
            <summary>
            When did it all happen?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.TransformError.Object">
            <summary>
            The object that was supposed to be transformed
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.TransformError.Type">
            <summary>
            The kind of transform that failed
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.TransformError.Runspace">
            <summary>
            The runspace it all happened on
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.TransformError.#ctor(System.Management.Automation.ErrorRecord,System.String,System.String,System.Object,Sqlcollaborative.Dbatools.Message.TransformType,System.Guid)">
            <summary>
            Creates a new transform error
            </summary>
            <param name="Record">The record of what went wrong</param>
            <param name="FunctionName">The name of the function writing the transformed message</param>
            <param name="ModuleName">The module the function writing the transformed message is part of</param>
            <param name="Object">The object that should have been transformed</param>
            <param name="Type">The type of transform that was attempted</param>
            <param name="Runspace">The runspace it all happened on</param>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Message.TransformList">
            <summary>
            List engine, managing the lists for a message transformation type
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.TransformList.GetAll">
            <summary>
            Returns all entries in the list.
            </summary>
            <returns>The list of transforms contained within</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.TransformList.IsListed(Sqlcollaborative.Dbatools.Message.TransformCondition)">
            <summary>
            Returns whether the actual object is part of the list
            </summary>
            <param name="Condition">The object to test for list membership</param>
            <returns>Whether the object is listed</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.TransformList.IsContained(Sqlcollaborative.Dbatools.Message.TransformCondition)">
            <summary>
            Returns whether a condition with equal conditions already exists
            </summary>
            <param name="Condition">The condition to test</param>
            <returns>Whether the referenced condition is already listed</returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.TransformList.Add(Sqlcollaborative.Dbatools.Message.TransformCondition)">
            <summary>
            Adds a condition to the list, if there is no equivalent condition present.
            </summary>
            <param name="Condition">The condition to add</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.TransformList.Remove(Sqlcollaborative.Dbatools.Message.TransformCondition)">
            <summary>
            Removes a condition from the lsit of conditional transforms
            </summary>
            <param name="Condition">The condition to remove</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Message.TransformList.Get(System.String,System.String,System.String)">
            <summary>
            Returns the first transform whose filter is similar enough to work out.
            </summary>
            <param name="TypeName">The name of the type to check for a transform</param>
            <param name="ModuleName">The module of the command that wrote the message with the transformable object</param>
            <param name="Functionname">The command that wrote the message with the transformable object</param>
            <returns>Either a transform or null, if no fitting transform was found</returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Message.TransformType">
            <summary>
            The messaging system provides these kinds of transformations for input.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.TransformType.Target">
            <summary>
            A target transform can transform the target object specified. Used for live-state objects that should not be serialized on a second thread.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Message.TransformType.Exception">
            <summary>
            An exception transform allows automatic transformation of exceptions. Primarily used to unwrap exceptions from an API that wraps all exceptions.
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Parameter.DbaCmConnectionParameter">
            <summary>
            Input converter for Computer Management Information
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaCmConnectionParameter.Connection">
            <summary>
            The resolved connection object
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaCmConnectionParameter.Success">
            <summary>
            Whether input processing was successful
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaCmConnectionParameter.InputObject">
            <summary>
            The object actually passed to the class
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCmConnectionParameter.op_Implicit(Sqlcollaborative.Dbatools.Parameter.DbaCmConnectionParameter)~Sqlcollaborative.Dbatools.Connection.ManagementConnection">
            <summary>
            Implicitly convert all connection parameter objects to the connection-type
            </summary>
            <param name="Input">The parameter object to convert</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCmConnectionParameter.#ctor(System.String)">
            <summary>
            Creates a new DbaWmConnectionParameter based on an input-name
            </summary>
            <param name="ComputerName">The name of the computer the connection is stored for.</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCmConnectionParameter.#ctor(Sqlcollaborative.Dbatools.Connection.ManagementConnection)">
            <summary>
            Creates a new DbaWmConnectionParameter based on an already existing connection object.
            </summary>
            <param name="Connection">The connection to accept</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCmConnectionParameter.#ctor(System.Object)">
            <summary>
            Tries to convert a generic input object into a true input.
            </summary>
            <param name="Input">Any damn object in the world</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCmConnectionParameter.#ctor(Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter)">
            <summary>
            Creates a new DbaCmConnectionParameter based on an instance parameter
            </summary>
            <param name="Instance">The instance to interpret</param>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter">
            <summary>
            Parameter class that handles the various kinds of credential input
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.Credential">
            <summary>
            The credential object received
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.UserName">
            <summary>
            The name of the credential object
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.Password">
            <summary>
            The password of the credential object
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.#ctor(System.Management.Automation.PSCredential)">
            <summary>
            Creates a credential parameter from a PSCredential object
            </summary>
            <param name="Credential">A PSCredential object</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.#ctor(System.Net.NetworkCredential)">
            <summary>
            Creates a credential parameter from a NetworkCredential object
            </summary>
            <param name="Credential">The credentials to use</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.#ctor(System.Object)">
            <summary>
            Creates a credential parameter from anything it nows how to handle
            </summary>
            <param name="Credential">The object to convert</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.op_Implicit(Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter)~System.Management.Automation.PSCredential">
            <summary>
            Implicitly converts from DbaCredentialParameter to PSCredential
            </summary>
            <param name="Input">The DbaCredentialParameter to convert</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.op_Implicit(System.Management.Automation.PSCredential)~Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter">
            <summary>
            Implicitly converts a PSCredential object to DbaCredenitalParameter
            </summary>
            <param name="Input">The PSCredential to convert</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.op_Implicit(Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter)~System.Net.NetworkCredential">
            <summary>
            Implicitly converts from DbaCredentialParameter to NetworkCredential
            </summary>
            <param name="Input">The DbaCredentialParameter to convert</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.op_Implicit(System.Net.NetworkCredential)~Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter">
            <summary>
            Implicitly converts a NetworkCredential object to DbaCredenitalParameter
            </summary>
            <param name="Input">The NetworkCredential to convert</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.GetNetworkCredential">
            <summary>
            Legacy wrapper. While there exists implicit conversion, this allows using the object as before, avoiding errors for unknown method.
            </summary>
            <returns>A network credential object with the same credentials as the original object</returns>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.CredentialStore">
            <summary>
            Cached credentials, if the user stors them under a name.
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.GetTypeCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToBoolean(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToChar(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToSByte(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToByte(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToInt16(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToUInt16(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToInt32(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToUInt32(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToInt64(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToUInt64(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToSingle(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToDouble(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToDecimal(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToDateTime(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaCredentialParameter.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Tries to convert the credential parameter to one of its supported types
            </summary>
            <param name="TargetType">The type to convert to</param>
            <param name="Format">Irrelevant</param>
            <returns></returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Parameter.DbaDatabaseParameter">
            <summary>
            Parameter class that accepts anything pointing at a database
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaDatabaseParameter.InputObject">
            <summary>
            The original object passed to the parameter
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaDatabaseParameter.Database">
            <summary>
            The SMO Database Object
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaDatabaseParameter.Name">
            <summary>
            The name of the database
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaDatabaseParameter.#ctor(System.String)">
            <summary>
            Accepts the name of a database and converts it to a DbaDatabaseParameter
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaDatabaseParameter.#ctor(System.Object)">
            <summary>
            Accepts anything and tries to convert it to a live SMO Database object
            </summary>
            <param name="Item">The item to convert</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaDatabaseParameter.ToString">
            <summary>
            Overrides the regular tostring to show something pleasant and useful
            </summary>
            <returns>The name of the database</returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Parameter.DbaDatabaseSmoParameter">
            <summary>
            Parameter class that only accepts live SMO Databases
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaDatabaseSmoParameter.InputObject">
            <summary>
            The original object passed to the parameter
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaDatabaseSmoParameter.Database">
            <summary>
            The SMO Database Object
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaDatabaseSmoParameter.Name">
            <summary>
            The name of the database
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaDatabaseSmoParameter.#ctor(System.Object)">
            <summary>
            Accepts anything and tries to convert it to a live SMO Database object
            </summary>
            <param name="Item">The item to convert</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaDatabaseSmoParameter.ToString">
            <summary>
            Overrides the regular tostring to show something pleasant and useful
            </summary>
            <returns>The name of the database</returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Parameter.DbaInstanceInputType">
            <summary>
            What kind of object was bound to the parameter class?
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaInstanceInputType.Default">
            <summary>
            Anything, really. An unspecific not reusable type was bound
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaInstanceInputType.Linked">
            <summary>
            A live smo linked server object was bound
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaInstanceInputType.Server">
            <summary>
            A live smo server object was bound
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaInstanceInputType.RegisteredServer">
            <summary>
            A Central Management Server RegisteredServer SMO object was bound
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaInstanceInputType.ConnectionString">
            <summary>
            An actual connection string was specified. Connection strings are directly reused for SMO connections
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaInstanceInputType.ConnectionStringLocalDB">
            <summary>
            A connection string pointing at a local, file-based DB
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaInstanceInputType.SqlConnection">
            <summary>
            An already established sql connection to was created outside of SMO
            </summary>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter">
            <summary>
            Input converter for instance information
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.ComputerName">
            <summary>
            Name of the computer as resolvable by DNS
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.InstanceName">
            <summary>
            Name of the instance on the target server
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.Port">
            <summary>
            The port over which to connect to the server. Only present if non-default
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.NetworkProtocol">
            <summary>
            The network protocol to connect over
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.IsLocalHost">
            <summary>
            Verifies, whether the specified computer is localhost or not.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.FullName">
            <summary>
            Full name of the instance, including the server-name
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.FullSmoName">
            <summary>
            Full name of the instance, including the server-name, used when connecting via SMO
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.SqlComputerName">
            <summary>
            Name of the computer as used in an SQL Statement
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.SqlInstanceName">
            <summary>
            Name of the instance as used in an SQL Statement
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.SqlFullName">
            <summary>
            Full name of the instance, including the server-name as used in an SQL statement
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.IsConnectionString">
            <summary>
            Whether the input is a connection string
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.InputObject">
            <summary>
            The original object passed to the parameter class.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.Type">
            <summary>
            What kind of object was bound to the parameter class? For efficiency's purposes.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.LinkedLive">
            <summary>
            Returns, whether a live SMO object was bound for the purpose of accessing LinkedServer functionality
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.LinkedServer">
            <summary>
            Returns the available Linked Server objects from live objects only
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.op_Implicit(Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter)~System.String">
            <summary>
            Converts the parameter class to its full name
            </summary>
            <param name="Input">The parameter class object to convert</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.#ctor(System.String)">
            <summary>
            Creates a DBA Instance Parameter from string
            </summary>
            <param name="Name">The name of the instance</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.#ctor(System.Net.IPAddress)">
            <summary>
            Creates a DBA Instance Parameter from an IPAddress
            </summary>
            <param name="Address"></param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.#ctor(System.Net.NetworkInformation.PingReply)">
            <summary>
            Creates a DBA Instance Parameter from the reply to a ping
            </summary>
            <param name="Ping">The result of a ping</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.#ctor(System.Net.IPHostEntry)">
            <summary>
            Creates a DBA Instance Parameter from the result of a dns resolution
            </summary>
            <param name="Entry">The result of a dns resolution, to be used for targetting the default instance</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            Creates a DBA Instance Parameter from an established SQL Connection
            </summary>
            <param name="Connection">The connection to reuse</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.#ctor(Sqlcollaborative.Dbatools.Discovery.DbaInstanceReport)">
            <summary>
            Accept and understand discovery reports.
            </summary>
            <param name="Report">The report to interpret</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.#ctor(System.Object)">
            <summary>
            Creates a DBA Instance parameter from any object
            </summary>
            <param name="Input">Object to parse</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.ToString">
            <summary>
            Overrides the regular <c>ToString()</c> to show something pleasant and useful
            </summary>
            <returns>The <see cref="P:Sqlcollaborative.Dbatools.Parameter.DbaInstanceParameter.FullSmoName"/></returns>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Parameter.DbaSelectParameter">
            <summary>
            Class that automatically parses input chosen for the -Property parameter of Select-PSUObject
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaSelectParameter.InputObject">
            <summary>
            The original input object
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.DbaSelectParameter.Value">
            <summary>
            The value as Select-Object wants it
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaSelectParameter.#ctor(System.String)">
            <summary>
            Builds a property parameter from string
            </summary>
            <param name="Value">The string to interpret</param>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.DbaSelectParameter.#ctor(System.Collections.Hashtable)">
            <summary>
            Builds a select parameter from a hashtable (pretty straightforward)
            </summary>
            <param name="Hash">The hashtable to accept</param>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Parameter.ParameterContractAttribute">
            <summary>
            The attribute used to define the elements of a ParameterClass contract
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.ParameterContractAttribute.Type">
            <summary>
            Returns the type of the element this attribute is supposed to be attached to.
            </summary>
        </member>
        <member name="P:Sqlcollaborative.Dbatools.Parameter.ParameterContractAttribute.Behavior">
            <summary>
            Returns the behavior to expect from the contracted element. This sets the expectations on how this element is likely to act.
            </summary>
        </member>
        <member name="M:Sqlcollaborative.Dbatools.Parameter.ParameterContractAttribute.#ctor(Sqlcollaborative.Dbatools.Parameter.ParameterContractType,Sqlcollaborative.Dbatools.Parameter.ParameterContractBehavior)">
            <summary>
            Ceates a perfectly common parameter contract attribute. For use with all parameter classes' public elements.
            </summary>
            <param name="Type"></param>
            <param name="Behavior"></param>
        </member>
        <member name="T:Sqlcollaborative.Dbatools.Parameter.ParameterContractBehavior">
            <summary>
            Defines how this element will behave
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.ParameterContractBehavior.NotContracted">
            <summary>
            This elements is not actually part of the contract. Generally you wouldn't want to add the attribute at all in that case. However, in some places it helps avoiding confusion.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.ParameterContractBehavior.Mandatory">
            <summary>
            This element may never be null and must be considered in all assignments. Even if the element is de facto not nullable, all constructors must assign it.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.ParameterContractBehavior.Optional">
            <summary>
            This element may contain data, but is not required to. In case of a method, it may simply do nothing
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.ParameterContractBehavior.Failable">
            <summary>
            This method may throw an error when executing and should always be handled with try/catch. Use this on methods that use external calls.
            </summary>
        </member>
        <member name="F:Sqlcollaborative.Dbatools.Parameter.ParameterContractBehavior.Arbiter">
            <summary>
            The content of the thus marked fiel